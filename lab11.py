# Lucas de Oliveira Silva 220715
(lambda ites, grade, regras, fn_viz, fmap_grade, recur, f: [print('iteracao %i\n' % i + '\n'.join(map(lambda l: ''.join(l.values()), recur((fmap_grade, grade, fn_viz, regras), f, i, recur)[1].values()))) for i in range(ites + 1)])(*(lambda m: (int(input()), {l: dict(enumerate(input().split())) for l in range(m)}))(tuple(map(int, input().split()))[0]) + ({'0': lambda viz: '1' if viz[0] == 2 else '0', '1': lambda viz: '2' if viz[1] >= 1 else '1', '2': lambda viz: '0' if viz[0] >= 2 else ('0' if viz[0] == 0 else '2')}, lambda g, i, j: (sum([g.get(i + y, {}).get(j + x, '0') == '1' for y in range(-1, 2) for x in range(-1, 2)]) - (g[i][j] == '1'), sum([g.get(i + y, {}).get(j + x, '0') == '2' for y in range(-1, 2) for x in range(-1, 2)]) - (g[i][j] == '2')), lambda grade, fn_viz, regras: {i: {j: regras[v](fn_viz(grade, i, j)) for j, v in l.items()} for i, l in grade.items()}, lambda v, f, n, recur: recur(f(v), f, n - 1, recur) if n > 0 else v, lambda v: (v[0], v[0](v[1], v[2], v[3]), v[2], v[3])))
